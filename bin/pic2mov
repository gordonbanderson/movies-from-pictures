#!/usr/bin/env php
<?php

if (is_file(__DIR__.'/../vendor/autoload.php') === true) {
    include_once __DIR__.'/../vendor/autoload.php';
} else {
    error_log('ERROR: Autoload file could not be found');
    exit(1);
}

class MovieMakerCLI
{
    // register options and arguments
    protected function setup($options)
    {
        $options->setHelp('Calculate perceptive hashes for a directory of images, and make a movie from them');
        $options->registerOption('version', 'print version', 'v');

        $options->registerArgument('photo-dir', 'Directory where the images reside', true);


        $options->registerCommand('hashes', 'Calculate the perceptive hashes for a directory of photographs');
        $options->registerCommand('resize', 'Create thumbs and HD sized images from original camera images');
        $options->registerCommand('grouping', 'Group images together by perceptive hash');
        $options->registerCommand('video', 'Make a video based on perceptive hash');
    }


    private function primeCLI()
    {
        $cli = new Garden\Cli\Cli();
        $cli->description('Dump some information from your database.')
            ->opt('port:P', 'Port number to use.', false, 'integer')

            ->command('resize')
            ->description('Resize source images to required size for video output, and generate thumbnails')
            ->opt('size:s', 'Either widthXheight, e.g. 600X300 or a preknown size, HD, HD1080, UHD' .
                '(default HD1080).  This task will also create thumbnails for hashing',false)

            ->command('hashes')
            ->description('Generate perceptual hashes from the thumbnails generated by resize command')



            ->command('grouping')
            ->description('Group sequences of images together based on their Hamming distance, the number of'.
                'binary bits that differ between each image, based on a tolerance and also minimum length')
            ->opt('tolerance:t', 'Max Hamming distance to constitue an image match of a sequence ' .
                '(default 50)', false, 'integer')
            ->opt('length:l', 'The minimum number of frames to renders as a sequence (default 5)',
                false, 'integer')

            ->command('video')
            ->description('Push data to a remote server.')
            ->opt('frame-rate:f', 'The number of frames per sec in the final video', false, 'integer')
            ->opt('set-upstream:u', 'Add a reference to the upstream repo.', false, 'boolean')


            ->command('*')
            ->arg('photoDir', 'Relative or absolute path to the photographs', true);
            ;
        return $cli;
    }




    /**
     * Your main program
     *
     * Arguments and options have been parsed when this is run
     *
     * @param Options $options
     * @return void
     */
    public function main()
    {
        $cli = $this->primeCLI();

        /** @var \Garden\Cli\Args $args */
        $args = $cli->parse($argv, true);
        $runner = new Suilven\MoviesFromPictures\Runner\Runner();
        $exitCode = $runner->run($args);
        exit($exitCode);


    }
}
// execute it
$cli = new MovieMakerCLI();
$cli->main();

